var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.399,1,1.928]],["body/controllers/AppController.html",[0,2.163,1,2.981,2,1.7,3,0.376,4,0.319,5,0.319,6,3.08,7,0.499,8,1.346,9,4.54,10,1.542,11,0.037,12,3.722,13,4.738,14,3.722,15,0.635,16,3.722,17,1.058,18,1.48,19,0.61,20,0.787,21,3.921,22,2.658,23,1.403,24,2.632,25,3.08,26,3.722,27,0.376,28,0.162,29,2.658,30,2.342,31,2.089,32,2.342,33,1.542,34,3.722,35,0.028,36,0.028]],["title/modules/AppModule.html",[37,1.547,38,1.928]],["body/modules/AppModule.html",[1,2.965,2,1.891,3,0.307,4,0.26,5,0.26,11,0.037,19,0.667,20,0.642,24,2.762,25,2.511,27,0.307,28,0.132,35,0.024,36,0.024,37,2.091,38,3.677,39,1.532,40,2.091,41,2.511,42,2.511,43,2.511,44,3.071,45,2.762,46,2.605,47,1.909,48,1.909,49,3.035,50,2.956,51,2.956,52,3.035,53,2.511,54,2.167,55,2.511,56,3.035,57,2.511,58,1.909,59,1.716,60,1.703,61,3.035,62,3.035,63,1.716,64,3.035,65,0.407,66,3.035,67,3.035,68,3.035,69,3.035,70,3.035,71,3.035,72,3.035,73,0.948,74,3.035,75,3.035,76,3.035,77,2.167,78,3.035]],["title/injectables/AppService.html",[24,1.547,79,0.523]],["body/injectables/AppService.html",[3,0.418,4,0.354,5,0.354,7,0.554,8,1.438,9,4.714,11,0.036,15,0.705,17,1.175,18,1.58,19,0.484,20,0.875,24,2.555,27,0.418,28,0.18,33,1.713,35,0.03,36,0.03,79,0.863,80,1.558,81,3.422,82,4.135,83,4.135,84,4.135]],["title/injectables/AuditMiddleware.html",[79,0.523,85,1.928]],["body/injectables/AuditMiddleware.html",[3,0.361,4,0.306,5,0.306,7,0.479,8,1.311,11,0.036,15,0.609,17,1.015,19,0.54,20,0.755,27,0.361,28,0.155,32,2.247,35,0.027,36,0.027,65,0.479,79,0.787,80,1.346,85,2.903,86,2.956,87,3.818,88,3.818,89,3.216,90,4.23,91,4.471,92,3.857,93,4.471,94,3.572,95,1.225,96,0.922,97,0.836,98,2.956,99,2.247,100,3.818,101,2.005,102,2.005,103,4.614,104,3.572,105,3.572,106,3.572]],["title/controllers/AuthController.html",[0,1.399,107,1.928]],["body/controllers/AuthController.html",[0,1.043,2,1.043,3,0.231,4,0.196,5,0.196,7,0.306,8,0.961,10,1.845,11,0.037,15,0.759,17,1.265,18,0.713,19,0.583,20,0.483,22,1.63,23,0.861,27,0.231,28,0.099,29,1.63,31,2.5,33,1.845,35,0.02,36,0.02,63,1.845,65,0.637,73,0.713,95,1.382,96,1.04,97,0.943,107,2.128,108,1.89,109,1.89,110,2.284,111,2.728,112,3.333,113,4.754,114,3.382,115,2.876,116,1.89,117,3.201,118,1.89,119,3.685,120,2.284,121,2.284,122,2.876,123,3.382,124,2.284,125,1.899,126,2.284,127,3.382,128,2.284,129,2.284,130,2.514,131,1.669,132,1.518,133,2.799,134,1.89,135,2.799,136,2.284,137,2.284,138,2.534,139,2.799,140,1.89,141,2.799,142,1.89,143,1.89,144,1.89,145,1.282,146,1.63,147,1.89,148,2.034,149,1.89,150,1.89,151,1.89,152,1.437,153,1.63,154,1.89,155,3.333,156,2.284,157,2.284,158,1.89,159,1.89,160,1.63,161,1.89,162,2.284,163,1.89,164,2.534,165,2.284,166,2.284,167,2.284,168,2.284,169,2.284,170,2.284,171,1.89]],["title/classes/AuthLoginDto.html",[28,0.133,117,1.72]],["body/classes/AuthLoginDto.html",[3,0.372,4,0.315,5,0.315,7,0.493,10,1.949,11,0.036,15,0.802,18,1.706,19,0.551,23,1.387,27,0.372,28,0.204,35,0.028,36,0.028,63,2.264,65,0.63,73,1.619,117,2.64,172,2.066,173,4.29,174,3.045,175,1.772,176,2.148,177,4.704,178,3.68,179,3.68,180,2.91,181,3.701,182,2.066,183,2.64]],["title/modules/AuthModule.html",[37,1.547,44,1.72]],["body/modules/AuthModule.html",[2,1.692,3,0.262,4,0.222,5,0.222,8,0.736,11,0.037,15,0.441,17,0.736,19,0.653,20,0.548,27,0.374,28,0.161,32,2.331,35,0.022,36,0.022,37,1.871,39,1.307,40,1.871,44,3.214,45,2.626,46,2.331,47,1.629,48,1.629,50,2.645,51,3.09,53,3.066,54,1.848,55,2.142,65,0.347,95,0.888,96,0.668,97,0.606,99,1.629,102,2.08,107,2.722,111,1.307,148,2.626,149,2.142,184,2.142,185,2.142,186,2.589,187,2.919,188,2.589,189,2.142,190,3.581,191,4.137,192,2.589,193,2.142,194,3.581,195,2.142,196,2.589,197,2.589,198,1.848,199,3.705,200,1.629,201,2.589,202,3.705,203,1.629,204,2.589,205,2.589,206,2.589,207,2.589,208,2.142,209,1.848,210,3.705,211,3.705,212,2.645,213,3.705]],["title/injectables/AuthService.html",[79,0.523,148,1.547]],["body/injectables/AuthService.html",[3,0.184,4,0.156,5,0.156,7,0.243,8,0.807,11,0.037,15,0.732,17,1.124,19,0.557,20,0.384,27,0.184,28,0.079,30,1.143,33,1.78,35,0.017,36,0.017,59,1.972,60,1.02,65,0.575,73,1.486,79,0.485,80,0.685,89,2.221,95,1.473,96,1.109,97,1.005,111,2.707,112,2.352,115,2.029,116,2.352,117,3.149,130,1.998,131,1.78,132,1.319,138,2.702,148,1.435,150,1.504,151,1.504,152,1.143,153,1.297,164,2.864,176,1.78,198,1.297,209,1.297,214,1.504,215,2.842,216,2.352,217,2.029,218,1.817,219,2.079,220,4.758,221,1.817,222,1.817,223,3.516,224,2.842,225,1.817,226,2.352,227,1.817,228,2.842,229,1.817,230,1.297,231,3.275,232,1.817,233,1.297,234,2.896,235,1.504,236,3.257,237,2.352,238,2.842,239,2.842,240,1.817,241,2.842,242,3.499,243,3.275,244,2.842,245,2.842,246,2.842,247,2.842,248,2.498,249,2.201,250,1.504,251,1.817,252,2.842,253,2.352,254,2.842,255,2.842,256,2.842,257,1.817,258,1.504]],["title/injectables/BenchmarkInterceptor.html",[79,0.523,259,1.928]],["body/injectables/BenchmarkInterceptor.html",[3,0.335,4,0.284,5,0.284,7,0.444,8,1.249,11,0.036,15,0.565,17,0.942,19,0.615,20,0.701,27,0.335,28,0.144,33,1.374,35,0.026,36,0.026,65,0.444,79,0.749,80,1.249,89,2.767,92,3.747,95,1.137,96,0.856,97,0.776,101,1.861,102,1.861,212,2.367,236,3.101,259,2.764,260,2.743,261,4.394,262,4.394,263,5.249,264,5.249,265,3.315,266,3.315,267,4.929,268,4.394,269,2.743,270,3.315,271,3.315,272,3.315,273,3.315,274,3.315,275,3.315,276,4.394,277,3.315,278,3.315,279,3.315,280,3.315,281,3.315,282,3.315,283,3.315,284,3.315]],["title/classes/CreateUserDto.html",[28,0.133,285,1.72]],["body/classes/CreateUserDto.html",[3,0.257,4,0.218,5,0.218,7,0.341,10,2.207,11,0.036,15,0.929,18,1.702,19,0.502,23,0.958,27,0.257,28,0.159,35,0.021,36,0.021,63,2.335,65,0.73,73,1.338,96,1.106,97,0.856,131,1.775,132,1.765,172,1.427,175,1.378,176,1.775,180,2.901,181,3.69,182,1.427,183,2.786,285,2.053,286,4.594,287,1.814,288,3.058,289,3.058,290,3.058,291,2.694,292,2.541,293,2.541,294,2.947,295,3.058,296,2.541,297,4.283,298,2.541,299,2.541,300,2.541,301,2.541,302,2.541,303,3.026,304,2.103,305,2.541,306,2.694,307,2.541,308,2.103,309,2.103,310,3.544,311,3.026,312,1.283,313,2.541,314,2.103,315,2.103]],["title/injectables/JwtAuthGuard.html",[79,0.523,145,1.72]],["body/injectables/JwtAuthGuard.html",[3,0.438,4,0.372,5,0.372,11,0.036,19,0.61,20,0.918,27,0.438,28,0.188,35,0.031,36,0.031,79,0.888,80,1.635,145,2.924,200,2.73,316,3.591,317,3.591,318,4.339,319,3.591,320,4.339]],["title/injectables/JwtStrategy.html",[79,0.523,187,1.72]],["body/injectables/JwtStrategy.html",[3,0.353,4,0.299,5,0.299,7,0.468,8,1.293,11,0.037,15,0.776,17,0.993,19,0.592,20,0.739,27,0.353,28,0.152,33,1.448,35,0.027,36,0.027,65,0.468,73,1.091,79,0.776,80,1.317,95,1.199,96,0.902,97,0.818,111,2.554,122,2.495,131,1.448,146,2.495,176,1.448,187,2.553,200,2.198,208,2.892,217,3.611,243,2.892,319,2.892,321,2.892,322,4.549,323,3.494,324,4.549,325,3.494,326,3.494,327,3.494,328,2.892,329,3.494,330,3.494,331,3.494,332,3.494,333,3.494,334,3.494,335,2.198,336,3.494,337,3.494,338,3.494,339,3.494]],["title/interfaces/ReqResponse.html",[340,1.72,341,1.399]],["body/interfaces/ReqResponse.html",[3,0.383,4,0.325,5,0.325,7,0.509,11,0.036,18,1.818,27,0.383,35,0.028,36,0.028,65,0.74,125,3.102,132,1.982,175,1.807,340,2.13,341,2.19,342,2.71,343,3.141,344,3.945,345,3.945,346,3.945,347,4.817]],["title/interfaces/ReqResponse-1.html",[340,1.44,341,1.172,348,2.123]],["body/interfaces/ReqResponse-1.html",[3,0.356,4,0.302,5,0.302,7,0.472,11,0.036,18,1.782,19,0.412,27,0.356,35,0.027,36,0.027,65,0.746,97,1.07,125,3.016,132,1.912,138,3.38,175,1.722,285,3.016,340,1.976,341,2.087,342,2.513,344,3.836,345,3.836,346,3.836,347,4.722,349,2.913,350,2.913,351,2.513]],["title/classes/UpdatePassDto.html",[28,0.133,130,1.547]],["body/classes/UpdatePassDto.html",[3,0.319,4,0.27,5,0.27,7,0.423,10,1.992,11,0.036,15,0.82,18,1.607,19,0.563,23,1.188,27,0.319,28,0.185,35,0.025,36,0.025,63,2.132,65,0.644,73,1.677,125,2.386,130,2.146,172,1.77,175,1.601,180,2.698,181,3.432,182,1.77,183,2.386,291,3.024,294,2.673,303,4.257,304,2.609,306,3.024,308,2.609,309,2.609,310,3.432,312,1.592,314,3.517,315,3.978,352,3.673,353,2.609,354,4.807,355,4.25,356,3.153,357,3.153,358,3.153,359,3.153,360,4.25,361,3.153]],["title/classes/UpdateUserDto.html",[28,0.133,362,1.72]],["body/classes/UpdateUserDto.html",[3,0.264,4,0.224,5,0.224,7,0.35,10,2.161,11,0.036,15,0.936,18,1.714,19,0.509,23,0.983,27,0.264,28,0.162,35,0.022,36,0.022,65,0.736,73,1.358,96,1.122,97,1.326,131,1.801,132,1.787,172,1.465,175,1.404,176,1.801,180,2.815,182,1.465,183,2.662,287,1.863,288,3.104,289,3.104,290,3.104,291,2.735,294,2.983,295,3.104,306,2.735,310,3.385,311,3.084,312,1.318,335,3.453,352,3.989,362,2.092,363,2.61,364,2.61,365,2.61,366,4.347,367,2.61,368,2.61,369,2.61,370,2.61,371,2.61,372,2.61,373,5.015]],["title/entities/User.html",[59,1.27,374,2.188]],["body/entities/User.html",[3,0.259,4,0.22,5,0.22,7,0.344,10,2.265,11,0.036,15,0.932,18,1.707,19,0.431,23,0.968,27,0.259,28,0.112,35,0.022,36,0.022,59,1.527,63,1.95,65,0.732,73,1.345,77,1.834,96,1.112,97,0.862,131,1.785,132,1.774,175,1.388,176,1.785,180,2.912,288,3.076,289,3.076,290,3.076,291,2.71,294,2.961,295,2.63,306,2.318,312,1.297,374,2.63,375,2.125,376,4.984,377,4.984,378,2.568,379,2.568,380,2.568,381,3.684,382,5.565,383,2.568,384,4.308,385,2.568,386,2.568,387,2.568,388,2.568,389,2.568,390,2.568,391,5.466,392,5.343,393,3.684]],["title/controllers/UsersController.html",[0,1.399,394,1.928]],["body/controllers/UsersController.html",[0,0.842,2,0.842,3,0.186,4,0.158,5,0.158,7,0.247,8,0.817,10,1.792,11,0.037,15,0.738,17,1.229,19,0.596,20,0.39,21,3.302,22,1.317,23,0.695,27,0.186,28,0.08,29,1.317,30,1.16,31,2.919,33,1.792,35,0.017,36,0.017,59,2.154,60,1.035,63,1.191,65,0.681,95,1.369,96,1.03,97,0.934,109,1.527,111,2.815,118,1.527,119,3.302,131,1.983,132,1.916,133,3.792,134,1.527,135,2.379,139,2.379,140,1.527,141,3.302,142,2.379,143,1.527,144,1.527,145,1.035,147,1.527,152,1.16,154,1.527,155,2.924,158,2.924,159,2.924,160,2.523,161,2.924,163,2.379,164,2.721,219,1.613,223,3.712,259,1.16,285,3.097,335,1.809,341,0.842,350,1.527,351,2.053,362,2.24,394,1.809,395,1.527,396,2.379,397,2.379,398,2.924,399,2.875,400,3.99,401,2.924,402,1.527,403,1.845,404,2.875,405,1.845,406,1.845,407,1.527,408,2.875,409,2.924,410,1.845,411,1.845,412,1.845,413,1.845,414,1.845,415,1.845,416,1.845,417,1.845,418,1.845,419,1.845,420,1.845,421,1.527,422,1.527,423,1.845,424,2.875,425,1.845,426,1.845,427,1.845,428,1.845,429,1.845,430,1.845,431,1.845,432,1.845,433,1.845,434,1.845,435,1.845,436,1.845,437,1.845,438,1.845]],["title/modules/UsersModule.html",[37,1.547,45,1.547]],["body/modules/UsersModule.html",[2,1.891,3,0.307,4,0.26,5,0.26,8,0.862,11,0.037,15,0.518,17,0.862,19,0.641,20,0.642,27,0.307,28,0.132,32,1.909,35,0.024,36,0.024,37,2.38,39,1.532,40,2.091,45,2.827,46,2.605,47,1.909,48,1.909,50,2.956,51,2.167,57,2.511,58,1.909,59,1.257,60,1.703,65,0.407,85,1.909,95,1.041,96,0.783,97,0.71,99,1.909,102,1.703,189,2.511,190,3.427,191,4.19,193,2.511,194,3.427,195,2.511,212,2.956,219,2.716,394,2.965,396,2.511,421,2.511,439,2.511,440,2.511,441,2.511,442,3.035,443,4.141,444,3.035,445,3.035,446,3.035,447,3.035,448,3.035,449,3.035,450,3.035,451,3.035,452,3.035,453,2.511,454,3.035,455,3.035,456,3.035]],["title/injectables/UsersService.html",[79,0.523,219,1.399]],["body/injectables/UsersService.html",[3,0.123,4,0.105,5,0.105,7,0.163,8,0.584,11,0.037,15,0.816,17,1.328,18,1.578,19,0.532,20,0.258,27,0.123,28,0.053,30,1.293,33,1.936,35,0.012,36,0.012,58,0.767,59,2.151,60,0.685,63,1.103,65,0.626,73,1.181,79,0.35,80,0.46,89,2.371,95,1.603,96,1.284,97,1.093,101,0.685,111,2.908,115,1.467,122,1.901,125,1.495,130,1.578,131,2.024,132,1.904,138,1.675,152,1.293,153,0.871,164,3.224,171,2.204,176,1.103,209,0.871,216,1.701,217,1.467,219,0.938,223,3.659,226,1.701,230,0.871,231,2.586,233,0.871,234,3.496,235,1.01,236,2.939,237,1.01,248,2.231,249,1.966,250,2.204,253,2.204,258,2.586,312,0.616,335,1.675,341,1.427,344,1.901,345,1.901,346,1.901,351,0.871,362,1.754,397,1.701,398,1.701,401,1.701,402,1.701,407,1.701,409,1.01,422,1.01,453,1.701,457,1.01,458,3.125,459,2.055,460,2.055,461,2.055,462,2.055,463,2.055,464,1.22,465,2.586,466,1.22,467,2.055,468,1.22,469,1.22,470,1.22,471,2.055,472,1.22,473,2.055,474,1.22,475,2.055,476,1.22,477,2.055,478,1.22,479,1.22,480,2.055,481,1.22,482,2.055,483,1.22,484,2.055,485,1.22,486,1.22,487,1.22,488,1.01,489,1.22,490,1.22,491,1.22,492,3.125,493,1.22,494,2.055,495,1.22,496,2.663,497,1.22,498,3.781,499,2.663,500,1.22,501,1.22,502,1.22,503,2.055,504,2.055,505,1.22,506,1.22,507,1.22,508,1.22,509,1.22,510,1.22,511,1.01,512,1.22,513,1.22,514,1.22,515,1.22,516,1.22,517,2.055,518,1.22,519,1.22,520,2.055,521,1.22,522,1.22]],["title/injectables/ValidUserMiddleware.html",[79,0.523,203,1.928]],["body/injectables/ValidUserMiddleware.html",[3,0.342,4,0.29,5,0.29,7,0.454,8,1.266,11,0.037,15,0.577,17,0.962,19,0.522,20,0.716,27,0.342,28,0.147,35,0.026,36,0.026,65,0.454,73,1.555,79,0.76,80,1.275,87,3.687,88,3.687,89,2.97,90,4.121,91,4.379,92,3.778,93,4.379,95,1.161,96,0.874,97,0.792,98,2.801,99,2.129,100,3.687,101,1.9,102,1.9,176,1.846,183,1.9,203,2.803,230,2.416,236,2.129,248,2.416,249,2.129,523,2.801,524,3.384,525,3.384,526,4.455,527,3.384,528,3.384,529,3.384]],["title/coverage.html",[530,2.976]],["body/coverage.html",[0,2.125,1,1.862,5,0.254,6,2.45,11,0.036,24,1.495,28,0.218,35,0.024,36,0.024,59,1.227,65,0.397,79,0.966,81,2.45,85,1.862,86,2.45,107,1.862,108,2.45,117,1.662,130,1.495,145,1.662,148,1.495,173,2.45,174,2.45,187,1.662,203,1.862,214,2.45,219,1.352,249,1.862,259,1.862,260,2.45,285,1.662,286,2.45,287,2.907,316,2.45,317,2.45,321,2.45,340,2.285,341,1.859,343,2.45,349,2.45,352,2.907,353,2.45,362,1.662,374,2.114,375,2.45,394,1.862,395,2.45,457,2.45,523,2.45,530,2.114,531,2.961,532,2.961,533,2.961,534,6.129,535,5.254,536,4.071,537,4.653,538,4.653,539,4.071,540,4.071,541,2.961,542,2.45,543,2.961,544,2.45,545,2.961,546,2.961,547,2.961]],["title/dependencies.html",[40,1.859,548,2.123]],["body/dependencies.html",[11,0.037,20,0.764,23,1.361,28,0.202,35,0.027,36,0.027,40,1.824,54,2.578,58,2.272,101,2.609,146,2.578,182,2.027,198,2.578,200,2.272,233,2.578,269,2.989,312,1.824,328,4.252,488,2.989,549,5.425,550,3.611,551,3.611,552,3.611,553,3.611,554,3.611,555,3.611,556,3.611,557,3.611,558,3.611,559,3.611,560,3.611,561,3.611,562,3.611,563,3.611,564,3.611,565,3.611,566,3.611,567,3.611,568,3.611,569,3.611,570,3.611,571,3.611,572,3.611,573,3.611,574,3.611]],["title/miscellaneous/functions.html",[575,2.123,576,3.047]],["body/miscellaneous/functions.html",[7,0.626,11,0.032,35,0.032,36,0.032,542,3.868,544,4.766,575,3.868,576,3.868,577,4.674]],["title/index.html",[7,0.344,578,2.566,579,2.566]],["body/index.html",[4,0.285,11,0.036,31,1.867,35,0.026,36,0.026,160,2.375,465,2.753,530,2.375,580,3.326,581,3.326,582,4.404,583,3.326,584,3.326,585,3.326,586,3.326,587,3.326,588,3.326,589,4.938,590,3.326,591,3.326,592,3.326,593,5.731,594,3.326,595,3.326,596,3.326,597,5.618,598,3.326,599,3.326,600,4.404,601,3.326,602,3.326,603,3.326,604,3.326,605,4.404,606,4.404,607,3.326,608,3.326,609,3.326,610,4.404,611,4.404,612,3.326,613,3.326,614,3.326,615,3.326,616,3.326,617,2.753,618,3.326,619,3.326,620,3.326,621,3.326,622,3.326,623,3.326,624,3.326,625,3.326,626,3.326,627,2.753,628,3.326,629,3.326,630,3.326,631,3.326,632,3.326,633,3.326,634,2.753]],["title/modules.html",[39,2.105]],["body/modules.html",[11,0.031,35,0.031,36,0.031,38,2.831,39,2.272,44,2.526,45,2.272,617,4.692,635,5.67,636,5.67,637,5.67]],["title/overview.html",[638,3.45]],["body/overview.html",[2,1.613,11,0.035,24,2.567,35,0.027,36,0.027,38,3.708,39,1.784,40,2.313,41,2.923,42,2.923,43,2.923,44,3.344,45,2.936,46,2.882,47,2.222,48,2.222,77,2.522,80,1.331,148,2.567,172,1.983,184,2.923,185,2.923,187,2.854,219,2.655,342,2.522,348,2.923,439,2.923,440,2.923,441,2.923,511,2.923,638,2.923,639,4.581,640,3.532,641,3.532]],["title/properties.html",[175,1.387,548,2.123]],["body/properties.html",[11,0.036,31,2.586,35,0.032,36,0.032,175,1.736,627,3.813,634,3.813,642,4.607,643,4.607,644,4.607]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":534,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":643,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":558,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":557,"title":{},"body":{"dependencies.html":{}}}],["0.5.3",{"_index":561,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":538,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":545,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":535,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":539,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":541,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":536,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":537,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":540,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":348,"title":{"interfaces/ReqResponse-1.html":{}},"body":{"overview.html":{}}}],["1.0.0",{"_index":564,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":641,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":550,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":560,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":555,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":499,"title":{},"body":{"injectables/UsersService.html":{}}}],["3",{"_index":639,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":640,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":562,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":529,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["5.2.1",{"_index":553,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{},"overview.html":{}}}],["8.0.0",{"_index":549,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":554,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":551,"title":{},"body":{"dependencies.html":{}}}],["access_token",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["age",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["amazing",{"_index":618,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apibearerauth('access",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse({description",{"_index":12,"title":{},"body":{"controllers/AppController.html":{}}}],["apicreatedresponse({type",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse({type",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":180,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["apitags",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('root",{"_index":26,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('users",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":595,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":588,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":38,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":24,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auditmiddleware",{"_index":85,"title":{"injectables/AuditMiddleware.html":{}},"body":{"injectables/AuditMiddleware.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":317,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/jwt",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["auth/register",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":107,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":318,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":320,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authlogindto",{"_index":117,"title":{"classes/AuthLoginDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authlogindto.email",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["authlogindto.password",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["authmodule",{"_index":44,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":627,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":148,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":619,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(password",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(password",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcryptjs",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{}}}],["benchmarkinterceptor",{"_index":259,"title":{"injectables/BenchmarkInterceptor.html":{}},"body":{"injectables/BenchmarkInterceptor.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["body",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":347,"title":{},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{}}}],["bootstrap",{"_index":544,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":637,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":635,"title":{},"body":{"modules.html":{}}}],["building",{"_index":583,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":264,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["catch",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{}}}],["class",{"_index":28,"title":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":172,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collecteduser",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{}}}],["collecteduser.id",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["collectuser",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["collectuser.id",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["column",{"_index":391,"title":{},"body":{"entities/User.html":{}}}],["column({default",{"_index":376,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":381,"title":{},"body":{"entities/User.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["configure(consumer",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["console.log('logging",{"_index":103,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["console.log(`endpoint",{"_index":277,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["console.log(`execution",{"_index":282,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["const",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["constructor",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(private",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["consumer.apply(auditmiddleware).forroutes",{"_index":455,"title":{},"body":{"modules/UsersModule.html":{}}}],["consumer.apply(validusermiddleware).forroutes",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["context",{"_index":266,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["context.switchtohttp",{"_index":273,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('users",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":530,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["created",{"_index":500,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdat",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["createuser",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(user",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuserdto",{"_index":285,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/ReqResponse-1.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["ctx",{"_index":272,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["ctx.getrequest",{"_index":274,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["current",{"_index":452,"title":{},"body":{"modules/UsersModule.html":{}}}],["data",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/ReqResponse-1.html":{},"injectables/UsersService.html":{}}}],["data.password",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["data.repassword",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["database",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["date.now",{"_index":276,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":382,"title":{},"body":{"entities/User.html":{}}}],["define",{"_index":449,"title":{},"body":{"modules/UsersModule.html":{}}}],["defined",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["delete",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":40,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":596,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":531,"title":{},"body":{"coverage.html":{}}}],["dto/auth",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":350,"title":{},"body":{"interfaces/ReqResponse-1.html":{},"controllers/UsersController.html":{}}}],["dto/response.dto",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/update",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["e2e",{"_index":607,"title":{},"body":{"index.html":{}}}],["edit",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["efficient",{"_index":584,"title":{},"body":{"index.html":{}}}],["email",{"_index":176,"title":{},"body":{"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["entities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/user.entity",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":374,"title":{"entities/User.html":{}},"body":{"entities/User.html":{},"coverage.html":{}}}],["error",{"_index":344,"title":{},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"injectables/UsersService.html":{}}}],["error('there",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["executioncontext",{"_index":263,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["export",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["exports",{"_index":443,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":101,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":319,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":326,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":333,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":335,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["findall",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyid(id",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduser.password",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["finduserbyemail(email",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["forfeature",{"_index":448,"title":{},"body":{"modules/UsersModule.html":{}}}],["framework",{"_index":582,"title":{},"body":{"index.html":{}}}],["function",{"_index":543,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":576,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get(':id",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":578,"title":{"index.html":{}},"body":{}}],["getuserbyid",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(@param('id",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserbyid(id",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["grow",{"_index":614,"title":{},"body":{"index.html":{}}}],["handle",{"_index":280,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["hash",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["hashpassword(password",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["hello",{"_index":83,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["host",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["httpexception",{"_index":525,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["httpexception('email",{"_index":528,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["https://nestjs.com",{"_index":631,"title":{},"body":{"index.html":{}}}],["id",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":532,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":334,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":102,"title":{},"body":{"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"injectables/BenchmarkInterceptor.html":{},"modules/UsersModule.html":{},"injectables/ValidUserMiddleware.html":{}}}],["import",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["imports",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["inject",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(request",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":79,"title":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["injectables",{"_index":80,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"overview.html":{}}}],["injectrepository",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(user",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["installation",{"_index":592,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":594,"title":{},"body":{"index.html":{}}}],["intercept",{"_index":261,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["intercept(context",{"_index":262,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["interceptors/benchmark.interceptor",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["interface",{"_index":340,"title":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{}},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"coverage.html":{}}}],["interfaces",{"_index":342,"title":{},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"overview.html":{}}}],["ip",{"_index":104,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["isarray",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["isglobal",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["isnotempty",{"_index":181,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["isnotempty()@apiproperty({required",{"_index":177,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({required",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({required",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(6)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":302,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@minlength(8)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":355,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["isnumber",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isoptional",{"_index":373,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isnumber()@apiproperty({required",{"_index":363,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isoptional()@isstring()@apiproperty({required",{"_index":366,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{}}}],["join",{"_index":621,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtauthguard",{"_index":145,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":332,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":187,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":628,"title":{},"body":{"index.html":{}}}],["license",{"_index":634,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":611,"title":{},"body":{"index.html":{}}}],["local",{"_index":563,"title":{},"body":{"dependencies.html":{}}}],["logger",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["logger.error(user",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger.log",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["logger.log('*******middleware",{"_index":527,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["logger.log('payload_",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger.log('typeof_user_",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger.log(password",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger.log(this.request.user",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["logger.log(user.password",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login'})@post('login",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(@body",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(authlogindto",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login.dto.ts",{"_index":174,"title":{},"body":{"classes/AuthLoginDto.html":{},"coverage.html":{}}}],["login.dto.ts:11",{"_index":179,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["login.dto.ts:7",{"_index":178,"title":{},"body":{"classes/AuthLoginDto.html":{}}}],["login___",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["login___(authlogindto",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["logout",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["matches",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["matching",{"_index":36,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"injectables/UsersService.html":{}}}],["metadata",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BenchmarkInterceptor.html":{},"modules/UsersModule.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["middleware/audit.middleware",{"_index":446,"title":{},"body":{"modules/UsersModule.html":{}}}],["middleware/logger.middleware",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewareconsumer",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["minlength",{"_index":309,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["minlength(6",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(8",{"_index":360,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["miscellaneous",{"_index":575,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["mit",{"_index":610,"title":{},"body":{"index.html":{}}}],["mobile",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["mode",{"_index":600,"title":{},"body":{"index.html":{}}}],["module",{"_index":37,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":39,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":624,"title":{},"body":{"index.html":{}}}],["mysql2",{"_index":559,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec",{"_index":629,"title":{},"body":{"index.html":{}}}],["name",{"_index":96,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nest",{"_index":589,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":633,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":268,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":552,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":100,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nestmodule",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["new",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["newpassword",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser.password",{"_index":497,"title":{},"body":{"injectables/UsersService.html":{}}}],["next",{"_index":92,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/ValidUserMiddleware.html":{}}}],["nextfunction",{"_index":93,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["node.js",{"_index":581,"title":{},"body":{"index.html":{}}}],["now",{"_index":275,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["now}ms",{"_index":284,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["npm",{"_index":593,"title":{},"body":{"index.html":{}}}],["null",{"_index":392,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":267,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["open",{"_index":612,"title":{},"body":{"index.html":{}}}],["optional",{"_index":97,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":638,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":548,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["parameters",{"_index":95,"title":{},"body":{"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["parseint(process.env.db_port",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["parseintpipe",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["pass.dto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["pass.dto.ts",{"_index":353,"title":{},"body":{"classes/UpdatePassDto.html":{},"coverage.html":{}}}],["pass.dto.ts:13",{"_index":357,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["pass.dto.ts:20",{"_index":358,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["pass.dto.ts:23",{"_index":359,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["passport",{"_index":328,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":329,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":330,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["password'})@useguards(jwtauthguard)@put('updatepass/:id",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["path",{"_index":32,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["path'})@get",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["payload",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":337,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.id",{"_index":339,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.password",{"_index":338,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["pipe(tap",{"_index":281,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["please",{"_index":622,"title":{},"body":{"index.html":{}}}],["port",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('login",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('logout",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":384,"title":{},"body":{"entities/User.html":{}}}],["private",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["process.env.db_host",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_name",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_type",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_username",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.jwt_secret",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":602,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":580,"title":{},"body":{"index.html":{}}}],["project",{"_index":613,"title":{},"body":{"index.html":{}}}],["promise",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":175,"title":{"properties.html":{}},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["put",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["put(':id",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["put('updatepass/:id",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["read",{"_index":623,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(@body",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(authlogindto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["registered",{"_index":451,"title":{},"body":{"modules/UsersModule.html":{}}}],["repassword",{"_index":354,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["repositories",{"_index":450,"title":{},"body":{"modules/UsersModule.html":{}}}],["repository",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":98,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["req.body",{"_index":526,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["req.ip",{"_index":105,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["req.path",{"_index":106,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["reqresponse",{"_index":341,"title":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{}},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["request",{"_index":89,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["request.method",{"_index":279,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["request.url",{"_index":278,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["requestmethod",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["requestmethod.get",{"_index":456,"title":{},"body":{"modules/UsersModule.html":{}}}],["requestmethod.post",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["required",{"_index":183,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"injectables/ValidUserMiddleware.html":{}}}],["res",{"_index":90,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resp",{"_index":498,"title":{},"body":{"injectables/UsersService.html":{}}}],["response",{"_index":91,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["results",{"_index":35,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":33,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["rimraf",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["root",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["run",{"_index":597,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":269,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":271,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["scalable",{"_index":585,"title":{},"body":{"index.html":{}}}],["scope",{"_index":453,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["scope.request",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["secret",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":336,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":586,"title":{},"body":{"index.html":{}}}],["side",{"_index":587,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"index.html":{}}}],["sponsors",{"_index":616,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":577,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:12",{"_index":16,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":81,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":82,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:45",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:50",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:56",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:32",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:59",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:71",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/jwt",{"_index":316,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":321,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:15",{"_index":325,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:6",{"_index":323,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/dto/auth",{"_index":173,"title":{},"body":{"classes/AuthLoginDto.html":{},"coverage.html":{}}}],["src/dto/create",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/dto/response.dto.ts",{"_index":343,"title":{},"body":{"interfaces/ReqResponse.html":{},"coverage.html":{}}}],["src/dto/update",{"_index":352,"title":{},"body":{"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts",{"_index":375,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/entities/user.entity.ts:14",{"_index":385,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:18",{"_index":387,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:22",{"_index":386,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:26",{"_index":383,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:30",{"_index":388,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:34",{"_index":378,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:38",{"_index":380,"title":{},"body":{"entities/User.html":{}}}],["src/entities/user.entity.ts:42",{"_index":390,"title":{},"body":{"entities/User.html":{}}}],["src/interceptors/benchmark.interceptor.ts",{"_index":260,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{},"coverage.html":{}}}],["src/interceptors/benchmark.interceptor.ts:13",{"_index":265,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["src/main.ts",{"_index":542,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/middleware/audit.middleware.ts",{"_index":86,"title":{},"body":{"injectables/AuditMiddleware.html":{},"coverage.html":{}}}],["src/middleware/audit.middleware.ts:6",{"_index":94,"title":{},"body":{"injectables/AuditMiddleware.html":{}}}],["src/middleware/logger.middleware.ts",{"_index":523,"title":{},"body":{"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["src/middleware/logger.middleware.ts:12",{"_index":524,"title":{},"body":{"injectables/ValidUserMiddleware.html":{}}}],["src/schemas/response.ts",{"_index":349,"title":{},"body":{"interfaces/ReqResponse-1.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:52",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:58",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:78",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.module.ts:21",{"_index":444,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:102",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:111",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:122",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:126",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:19",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:31",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:41",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:78",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:94",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:98",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":598,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":601,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":603,"title":{},"body":{"index.html":{}}}],["started",{"_index":579,"title":{"index.html":{}},"body":{}}],["starter",{"_index":591,"title":{},"body":{"index.html":{}}}],["statements",{"_index":533,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":345,"title":{},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"injectables/UsersService.html":{}}}],["stay",{"_index":625,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":327,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["success",{"_index":346,"title":{},"body":{"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":331,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":617,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":636,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":547,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":546,"title":{},"body":{"coverage.html":{}}}],["tap",{"_index":270,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["test",{"_index":606,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":609,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":608,"title":{},"body":{"index.html":{}}}],["tests",{"_index":605,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":615,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":34,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(authlogindto",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login___(authlogindto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.updatepassword(id",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.findbyid(id",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.finduserbyemail(email",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashpassword(data.password",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashpassword(user.password",{"_index":495,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.request.user",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.delete(id",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":496,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(user",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.deleteuser(id",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.finduserbyemail(email",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updatepassword(id",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(id",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validatepassword(email",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{}}}],["time",{"_index":283,"title":{},"body":{"injectables/BenchmarkInterceptor.html":{}}}],["token",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["token')@apicreatedresponse({type",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["token')@apiokresponse({type",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["touch",{"_index":626,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":556,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["twitter",{"_index":632,"title":{},"body":{"index.html":{}}}],["type",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuditMiddleware.html":{},"controllers/AuthController.html":{},"classes/AuthLoginDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BenchmarkInterceptor.html":{},"classes/CreateUserDto.html":{},"injectables/JwtStrategy.html":{},"interfaces/ReqResponse.html":{},"interfaces/ReqResponse-1.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["typeof",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["typeorm",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":454,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":590,"title":{},"body":{"index.html":{}}}],["ui",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["undefined})@apiproperty",{"_index":377,"title":{},"body":{"entities/User.html":{}}}],["undefined})@createdatecolumn",{"_index":379,"title":{},"body":{"entities/User.html":{}}}],["undefined})@updatedatecolumn",{"_index":389,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":393,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":604,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":644,"title":{},"body":{"properties.html":{}}}],["update",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["updated",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatedat",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["updatepassdto",{"_index":130,"title":{"classes/UpdatePassDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdatePassDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updatepassword",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updatepassword(data",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["updatepassword(id",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["updateuser",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(id",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuser(user",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuserdto",{"_index":362,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["use",{"_index":87,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["use(req",{"_index":88,"title":{},"body":{"injectables/AuditMiddleware.html":{},"injectables/ValidUserMiddleware.html":{}}}],["usefactory",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["useinterceptors(benchmarkinterceptor",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["user",{"_index":59,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user'})@apinotfoundresponse()@useguards(jwtauthguard)@put(':id",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@post",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@useguards(jwtauthguard)@delete(':id",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@useguards(jwtauthguard)@get(':id",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["user.dto",{"_index":351,"title":{},"body":{"interfaces/ReqResponse-1.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:12",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:13",{"_index":370,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:16",{"_index":301,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:18",{"_index":364,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:22",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":369,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:27",{"_index":300,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:28",{"_index":367,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":365,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:32",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":372,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:39",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:45",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:6",{"_index":368,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:8",{"_index":371,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.id",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.password",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["username",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users'})@get",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":445,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":394,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":219,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":447,"title":{},"body":{"modules/UsersModule.html":{}}}],["valid",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["validate",{"_index":322,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":324,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatepassword(email",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["validateuser",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["validateuser(authlogindto",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(name",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["validator",{"_index":182,"title":{},"body":{"classes/AuthLoginDto.html":{},"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["validusermiddleware",{"_index":203,"title":{"injectables/ValidUserMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/ValidUserMiddleware.html":{},"coverage.html":{}}}],["version",{"_index":642,"title":{},"body":{"properties.html":{}}}],["void",{"_index":99,"title":{},"body":{"injectables/AuditMiddleware.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"injectables/ValidUserMiddleware.html":{}}}],["watch",{"_index":599,"title":{},"body":{"index.html":{}}}],["weak",{"_index":361,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["weak'})@apiproperty({required",{"_index":356,"title":{},"body":{"classes/UpdatePassDto.html":{}}}],["website",{"_index":630,"title":{},"body":{"index.html":{}}}],["world",{"_index":84,"title":{},"body":{"injectables/AppService.html":{}}}],["wrong",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["you'd",{"_index":620,"title":{},"body":{"index.html":{}}}],["z",{"_index":315,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["z])(?=.*[a",{"_index":303,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["z]).*$/)@apiproperty({required",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdatePassDto.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({description: 'Root Path'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { ApiCreatedResponse, ApiTags } from '@nestjs/swagger';\nimport { AppService } from './app.service';\n\n@ApiTags('root')\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @ApiCreatedResponse({ description: 'Root Path' })\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { ConfigModule } from '@nestjs/config';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from './entities/user.entity';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    TypeOrmModule.forRoot({\n      type: process.env.DB_TYPE as any,\n      host: process.env.DB_HOST,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USERNAME,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME,\n      entities: [User],\n      synchronize: true,\n    }),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule { }\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuditMiddleware.html":{"url":"injectables/AuditMiddleware.html","title":"injectable - AuditMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuditMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/audit.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/audit.middleware.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class AuditMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    console.log('Logging request IP... ', req.ip);\n    console.log('Logging request Path...', req.path);\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                logout\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(authLoginDto: AuthLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: AuthLoginDto, isArray: true, description: 'Login'})@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authLoginDto\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logout\n                        \n                    \n                \n            \n            \n                \nlogout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(authLoginDto: AuthLoginDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authLoginDto\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(data: UpdatePassDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiOkResponse({type: UpdatePassDto, isArray: true, description: 'Update Password'})@UseGuards(JwtAuthGuard)@Put('updatePass/:id')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdatePassDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n} from '@nestjs/common';\nimport { JwtAuthGuard } from './jwt-auth.guard';\nimport { AuthService } from './auth.service';\nimport { AuthLoginDto } from '../dto/auth-login.dto';\nimport { UpdatePassDto } from '../dto/update-pass.dto';\nimport { ApiBearerAuth, ApiOkResponse, ApiTags } from '@nestjs/swagger';\n\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n\n  @ApiBearerAuth('access-token') //edit here\n  @ApiOkResponse({\n    type: UpdatePassDto,\n    isArray: true,\n    description: 'Update Password',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Put('updatePass/:id')\n  async updatePassword(\n    @Body() data: UpdatePassDto,\n    @Param('id', ParseIntPipe) id: number,\n  ) {\n    return await this.authService.updatePassword(id, data);\n  }\n\n  @ApiOkResponse({\n    type: AuthLoginDto,\n    isArray: true,\n    description: 'Login',\n  })\n  @Post('login')\n  async login(@Body() authLoginDto: AuthLoginDto) {\n    return await this.authService.login(authLoginDto);\n  }\n\n  @Post('register')\n  async register(@Body() authLoginDto: AuthLoginDto) {\n    return await this.authService.login___(authLoginDto);\n  }\n\n\n  @Post('logout')\n  logout() {\n    return {\n      message: 'Logout successfully',\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthLoginDto.html":{"url":"classes/AuthLoginDto.html","title":"class - AuthLoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthLoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/auth-login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/auth-login.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/auth-login.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class AuthLoginDto {\n  @IsNotEmpty()\n  @ApiProperty({ required: true })\n  email: string;\n\n  @IsNotEmpty()\n  @ApiProperty({ required: true })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.module.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  Module,\n  NestModule,\n  MiddlewareConsumer,\n  RequestMethod,\n} from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from '../users/users.module';\nimport { JwtStrategy } from './jwt.strategy';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { ValidUserMiddleware } from '../middleware/logger.middleware';\n\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async () => ({\n        secret: process.env.JWT_SECRET,\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(ValidUserMiddleware).forRoutes({\n      path: 'auth/register',\n      method: RequestMethod.POST,\n    });\n  }\n}\n\n\n// export class AuthModule implements NestModule {\n//   configure(consumer: MiddlewareConsumer) {\n//     consumer.apply(ValidUserMiddleware).forRoutes({\n//       path: 'auth/register',\n//       method: RequestMethod.POST,\n//     });\n//   }\n// }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                login___\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, request, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(authLoginDto: AuthLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authLoginDto\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login___\n                        \n                    \n                \n            \n            \n                \n                    \n                    login___(authLoginDto: AuthLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authLoginDto\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: number, data: UpdatePassDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdatePassDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(authLoginDto: AuthLoginDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authLoginDto\n                                    \n                                                AuthLoginDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { UsersService } from '../users/users.service';\nimport { AuthLoginDto } from '../dto/auth-login.dto';\nimport { Users } from '../entities/user.entity';\nimport { REQUEST } from '@nestjs/core';\nimport { JwtService } from '@nestjs/jwt';\nimport { UpdatePassDto } from '../dto/update-pass.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    @Inject(REQUEST)\n    private readonly request,\n    private jwtService: JwtService,\n  ) {}\n\n  async login(authLoginDto: AuthLoginDto): Promise {\n    const { email, password } = authLoginDto;\n    Logger.log(\n      '**************',\n      authLoginDto.email,\n      '*************',\n      authLoginDto.password,\n    );\n    const user = await this.usersService.validatePassword(email, password);\n\n    if (user) {\n      const collectUser = await this.usersService.findUserByEmail(email);\n      const payload = { email, password, id: collectUser.id };\n      Logger.log('payload_****************', payload);\n\n      return {\n        access_token: this.jwtService.sign(payload),\n      };\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async updatePassword(id: number, data: UpdatePassDto): Promise {\n    const user = this.request.user;\n    Logger.log('typeof_user_****************', typeof user.id, typeof id);\n    if (user.id === id && data.password === data.rePassword) {\n      //  if (data.password === data.rePassword) {\n      return await this.usersService.updatePassword(id, data);\n    } else {\n      Logger.error(user);\n      throw new UnauthorizedException();\n    }\n    // return await this.usersService.updatePassword(id, data);\n  }\n\n  async validateUser(authLoginDto: AuthLoginDto): Promise {\n    const { email, password } = authLoginDto;\n\n    const user = await this.usersService.findUserByEmail(email);\n\n    if (user && user.password === password) {\n      return user;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async login___(authLoginDto: AuthLoginDto): Promise {\n    const { email, password } = authLoginDto;\n    Logger.log(\n      '**************',\n      authLoginDto.email,\n      '*************',\n      authLoginDto.password,\n    );\n    const collectUser = await this.usersService.findUserByEmail(email);\n    const payload = { email, password, id: collectUser.id };\n    Logger.log('payload_****************', payload);\n\n    return {\n      access_token: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BenchmarkInterceptor.html":{"url":"injectables/BenchmarkInterceptor.html","title":"injectable - BenchmarkInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BenchmarkInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/interceptors/benchmark.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n            \n                \n                    Defined in src/interceptors/benchmark.interceptor.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            CallHandler\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestInterceptor,\n  ExecutionContext,\n  CallHandler,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Request } from 'express';\n\n@Injectable()\nexport class BenchmarkInterceptor implements NestInterceptor {\n  intercept(context: ExecutionContext, next: CallHandler): Observable {\n    const ctx = context.switchToHttp();\n    const request: Request = ctx.getRequest();\n\n    const now = Date.now();\n    console.log(`Endpoint:  ${request.url}, Method: ${request.method}`);\n\n    return next\n      .handle()\n      .pipe(tap(() => console.log(`Execution Time:  ${Date.now() - now}ms`)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                mobile\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsNumber()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(6)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/create-user.dto.ts:45\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  Matches,\n  MinLength,\n  IsString,\n  IsNumber,\n} from 'class-validator';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport class CreateUserDto {\n  id?: number;\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ required: true })\n  name: string;\n\n  \n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ required: true })\n  age: number;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ required: true })\n  mobile: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ required: true })\n  email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(6)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)\n  @ApiProperty({ required: true })\n  password: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: process.env.JWT_SECRET,\n    });\n  }\n\n  async validate(payload: any) {\n    return { email: payload.email, password: payload.password, id: payload.id };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReqResponse.html":{"url":"interfaces/ReqResponse.html","title":"interface - ReqResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReqResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/response.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface ReqResponse {\n  status: number;\n  success: boolean;\n  message: string;\n  error: string | boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ReqResponse-1.html":{"url":"interfaces/ReqResponse-1.html","title":"interface - ReqResponse-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ReqResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/schemas/response.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            success\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         CreateUserDto | any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CreateUserDto | any\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:     string | boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        success\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        success:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { CreateUserDto } from '../dto/create-user.dto';\n\nexport interface ReqResponse {\n  status: number;\n  success: boolean;\n  message: string;\n  error: string | boolean;\n  data?: CreateUserDto | any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdatePassDto.html":{"url":"classes/UpdatePassDto.html","title":"class - UpdatePassDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdatePassDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-pass.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                rePassword\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-pass.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        rePassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()@MinLength(8)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)@ApiProperty({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-pass.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-pass.dto.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, Matches, MinLength, IsString } from 'class-validator';\nimport { UpdateDateColumn } from 'typeorm';\n\nexport class UpdatePassDto {\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {\n    message: 'Password too weak',\n  })\n  @ApiProperty({ required: true })\n  password: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/)\n  @ApiProperty({ required: true })\n  rePassword: string;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dto/update-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                age\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                mobile\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                password\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsNumber()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@ApiProperty({required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/dto/update-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsNumber, IsOptional } from 'class-validator';\nimport { CreateDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport class UpdateUserDto {\n  id?: number;\n\n  password: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ required: false })\n  name?: string;\n\n  @IsOptional()\n  @IsNumber()\n  @ApiProperty({ required: false })\n  age?: number;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ required: false })\n  mobile?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({ required: false })\n  email?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                age\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                mobile\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                            \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        age\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mobile\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@ApiProperty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: undefined})@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/entities/user.entity.ts:42\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  CreateDateColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn()\n  id?: number;\n\n  @Column({ default: null })\n  @ApiProperty()\n  name: string;\n\n  @Column({ unique: true, default: null })\n  @ApiProperty()\n  mobile: string;\n\n  @Column({ unique: true, default: null })\n  @ApiProperty()\n  email: string;\n\n  @Column({ default: null })\n  @ApiProperty()\n  password: string;\n\n  @Column({ default: null })\n  @ApiProperty()\n  age: number;\n\n  @Column({ default: null })\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @Column({ default: null })\n  @UpdateDateColumn()\n  updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getUserById\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiCreatedResponse({type: CreateUserDto, description: 'Create An User'})@Post()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiCreatedResponse({type: CreateUserDto, description: 'Delete An User'})@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiOkResponse({type: CreateUserDto, isArray: false, description: 'Get An User'})@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOkResponse({type: CreateUserDto, isArray: true, description: 'Get All Users'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(user: UpdateUserDto, id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBearerAuth('access-token')@ApiCreatedResponse({type: CreateUserDto, description: 'Update An User'})@ApiNotFoundResponse()@UseGuards(JwtAuthGuard)@Put(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  ParseIntPipe,\n  Post,\n  Put,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { UsersService } from './users.service';\nimport { Users } from '../entities/user.entity';\nimport { ReqResponse } from '../dto/response.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport { JwtAuthGuard } from '../auth/jwt-auth.guard';\nimport {\n  ApiBearerAuth,\n  ApiCreatedResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { BenchmarkInterceptor } from '../interceptors/benchmark.interceptor';\n\n@ApiTags('users')\n@Controller('users')\n@UseInterceptors(BenchmarkInterceptor)\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOkResponse({\n    type: CreateUserDto,\n    isArray: true,\n    description: 'Get All Users',\n  })\n  @Get()\n  async getUsers(): Promise {\n    return await this.usersService.findAll();\n  }\n\n  @ApiBearerAuth('access-token') //edit here\n  @ApiOkResponse({\n    type: CreateUserDto,\n    isArray: false,\n    description: 'Get An User',\n  })\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  async getUserById(@Param('id', ParseIntPipe) id: number): Promise {\n    return await this.usersService.findOneById(id);\n  }\n\n  @ApiCreatedResponse({ type: CreateUserDto, description: 'Create An User' })\n  @Post()\n  async createUser(@Body() user: CreateUserDto): Promise {\n    return await this.usersService.createUser(user);\n  }\n\n  @ApiBearerAuth('access-token') //edit here\n  @ApiCreatedResponse({ type: CreateUserDto, description: 'Update An User' })\n  @ApiNotFoundResponse()\n  @UseGuards(JwtAuthGuard)\n  @Put(':id')\n  async updateUser(\n    @Body() user: UpdateUserDto,\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return await this.usersService.updateUser(id, user);\n  }\n\n  @ApiBearerAuth('access-token') //edit here\n  @ApiCreatedResponse({ type: CreateUserDto, description: 'Delete An User' })\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  async deleteUser(\n    @Param('id', ParseIntPipe) id: number,\n  ): Promise {\n    return await this.usersService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.module.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Users } from '../entities/user.entity';\nimport { AuditMiddleware } from '../middleware/audit.middleware';\n\n@Module({\n  //This module uses the forFeature() method to define which repositories are registered in the current scope\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(AuditMiddleware).forRoutes({\n      path: '/users',\n      method: RequestMethod.GET,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Private\n                                    Async\n                                findById\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findUserByEmail\n                            \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        findById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:122\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUserByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        hashPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePassword(id: number, data: UpdatePassDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                UpdatePassDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(id: number, user: UpdateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validatePassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:98\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Inject,\n  Injectable,\n  Logger,\n  Scope,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Users } from '../entities/user.entity';\nimport { ReqResponse } from '../dto/response.dto';\nimport { UpdateUserDto } from '../dto/update-user.dto';\nimport * as bcrypt from 'bcryptjs';\nimport { UpdatePassDto } from '../dto/update-pass.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Request } from 'express';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @Inject(REQUEST)\n    private readonly request: Request,\n  ) {}\n\n  async findAll(): Promise {\n    return await this.userRepository.find();\n  }\n\n  async findOneById(id: number): Promise {\n    const user: any = this.request.user;\n    if (user.id === id) {\n      return await this.userRepository.findOne({ where: { id: id } });\n    } else {\n      Logger.log(this.request.user);\n      throw new UnauthorizedException();\n    }\n  }\n\n  async createUser(user: User): Promise {\n    const newPassword = await this.hashPassword(user.password);\n    user.password = newPassword;\n    Logger.log('*****************************************');\n    await this.userRepository.save(user);\n    // delete newUser.password;\n    const resp: ReqResponse = {\n      status: 200,\n      success: true,\n      message: 'User created successfully',\n      error: false,\n    };\n    return resp;\n  }\n\n  async updateUser(id: number, user: UpdateUserDto): Promise {\n    user.id = id;\n    const collectedUser: any = this.request.user;\n    if (collectedUser.id === id) {\n      const findUser = await this.findById(id);\n      if (findUser) {\n        user.password = findUser.password;\n        await this.userRepository.save(user);\n      }\n\n      const resp: ReqResponse = {\n        status: 200,\n        success: true,\n        message: 'User updated successfully',\n        error: false,\n      };\n      return resp;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async deleteUser(id: number): Promise {\n    const user: any = this.request.user;\n    if (user.id === id) {\n      await this.userRepository.delete(id);\n      const resp: ReqResponse = {\n        status: 200,\n        success: true,\n        message: 'User deleted successfully',\n        error: false,\n      };\n      return resp;\n    } else {\n      throw new UnauthorizedException();\n    }\n  }\n\n  async findUserByEmail(email: string) {\n    return await this.userRepository.findOne({ where: { email } });\n  }\n\n  async validateUser(name: string): Promise {\n    return await this.userRepository.findOne({ where: { name: name } });\n  }\n\n  private async hashPassword(password: string) {\n    try {\n      password = await bcrypt.hash(password, 8);\n      return password;\n    } catch (e) {\n      throw new Error('There are some wrong in the hash');\n    }\n  }\n\n  async validatePassword(email: string, password: string): Promise {\n    // Logger.log(password);\n    const user = await this.findUserByEmail(email);\n    Logger.log(password);\n    Logger.log(user.password);\n    if (user) {\n      const valid = await bcrypt.compare(password, user.password);\n      return valid;\n    }\n  }\n\n  private async findById(id: number) {\n    return await this.userRepository.findOne({ where: { id: id } });\n  }\n\n  async updatePassword(id: number, data: UpdatePassDto): Promise {\n    const user = await this.findById(id);\n    if (user) {\n      user.password = await this.hashPassword(data.password);\n      return await this.userRepository.save(user);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ValidUserMiddleware.html":{"url":"injectables/ValidUserMiddleware.html","title":"injectable - ValidUserMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ValidUserMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/middleware/logger.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/middleware/logger.middleware.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  Injectable,\n  Logger,\n  NestMiddleware,\n} from '@nestjs/common';\n\nimport { Request, Response, NextFunction } from 'express';\n\n@Injectable()\nexport class ValidUserMiddleware implements NestMiddleware {\n  use(req: Request, res: Response, next: NextFunction) {\n    const { email, password } = req.body;\n    Logger.log('*******MIDDLEWARE**********', req.body);\n    if (email && password) {\n      next();\n    } else {\n      throw new HttpException('Email and password are required', 400);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/auth-login.dto.ts\n            \n            class\n            AuthLoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/dto/response.dto.ts\n            \n            interface\n            ReqResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/dto/update-pass.dto.ts\n            \n            class\n            UpdatePassDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/interceptors/benchmark.interceptor.ts\n            \n            injectable\n            BenchmarkInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/middleware/audit.middleware.ts\n            \n            injectable\n            AuditMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/middleware/logger.middleware.ts\n            \n            injectable\n            ValidUserMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/schemas/response.ts\n            \n            interface\n            ReqResponse\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.3\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            typeorm : ^0.3.6\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    1 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
